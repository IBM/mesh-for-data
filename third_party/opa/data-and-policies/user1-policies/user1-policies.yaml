apiVersion: v1
data:
  sample_policies.rego: "package dataapi.authz\nimport data.data_policies as dp\n\ntransform[action]
    {\n\tdescription = \"Columns with Confidential tag to be redacted before read
    action\"\n\tdp.correct_input\n    #user context and access type check\n    dp.check_access_type([dp.AccessTypes.READ])\n\tdp.check_purpose(\"Fraud
    Detection\")\n\tdp.check_role(\"Data Scientist\")\n\tdp.dataset_has_tag(\"residency
    = Turkey\")\t\n\tdp.check_processingGeo_not(\"Turkey\")\n    column_names := dp.column_with_tag(\"Confidential\")\n
    \   action = dp.build_redact_column_action(column_names[_], dp.build_policy_from_description(description))\n}\n\ndeny[action]
    {\n\tdescription = \"Deny if role is not Data Scientist when purpose is Fraud
    Detection\"\n\tdp.correct_input\n    #user context and access type check\n    dp.check_access_type([dp.AccessTypes.READ])\n\tdp.check_purpose(\"Fraud
    Detection\")\n\tdp.check_role_not(\"Data Scientist\")\n\tdp.dataset_has_tag(\"residency
    = Turkey\")\n    action = dp.build_deny_access_action(dp.build_policy_from_description(description))\n}\n\ndeny[action]
    {\n\tdescription = \"If columns have Confidential tag deny read action\"\n\tdp.correct_input\n
    \   #user context and access type check\n    dp.check_access_type([dp.AccessTypes.READ])\n\tdp.check_purpose(\"Customer
    Behaviour Analysis\")\n\tdp.check_role(\"Business Analyst\")\n\tdp.dataset_has_tag(\"residency
    = Turkey\")\n    dp.column_has_tag(\"Confidential\")\n    action = dp.build_deny_access_action(dp.build_policy_from_description(description))\n}\n\ndeny[action]
    {\n\tdescription = \"Deny if role is not Business Analyst when purpose is Customer
    Behaviour Analysis\"\n\tdp.correct_input\n    #user context and access type check\n
    \   dp.check_access_type([dp.AccessTypes.READ])\n\tdp.check_purpose(\"Customer
    Behaviour Analysis\")\n\tdp.check_role_not(\"Business Analyst\")\n\tdp.dataset_has_tag(\"residency
    = Turkey\")\n\tdp.check_processingGeo_not(\"Turkey\")\n    action = dp.build_deny_access_action(dp.build_policy_from_description(description))\n}\n\n\ndeny[action]
    {\n\tdescription = \"Deny if role is Data Scientist and purpose is Fraud Detection
    but the processing geography is not Trukey\"\n\tdp.correct_input\n    #user context
    and access type check\n    dp.check_access_type([dp.AccessTypes.READ])\n\tdp.check_purpose(\"Fraud
    Detection\")\n\tdp.check_role_not(\"Data Scientist\")\n\tdp.dataset_has_tag(\"residency
    = Turkey\")\n\tdp.check_processingGeo_not(\"Turkey\")\n    action = dp.build_deny_access_action(dp.build_policy_from_description(description))\n}\n\ndeny[action]
    {\n\tdescription = \"If data residency is Turkey but processing geography is not
    Turkey then deny writing\"\n\tdp.correct_input\n    #user context and access type
    check\n    dp.check_access_type([dp.AccessTypes.WRITE])\n\tdp.dataset_has_tag(\"residency
    = Turkey\")\n\tdp.check_processingGeo_not(\"Turkey\")\n    action = dp.build_deny_write_action(dp.build_policy_from_description(description))\n}\n\ndeny[action]
    {\n\tdescription = \"If data residency is not Turkey and processing geography
    is neither Turkey nor EEA then deny writing\"\n\tdp.correct_input\n    #user context
    and access type check\n    dp.check_access_type([dp.AccessTypes.WRITE])\n\tdp.dataset_has_tag_not(\"residency
    = Turkey\")\n\tdp.check_processingGeo_not(\"Turkey\")\n\tdp.check_processingGeo_not(\"EEA\")\n
    \   action = dp.build_deny_write_action(dp.build_policy_from_description(description))\n}\n"
kind: ConfigMap
metadata:
  labels:
    openpolicyagent.org/policy: rego
  name: user1-policies
