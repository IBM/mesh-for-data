apiVersion: v1
data:
  user_policies.rego: "package dataapi.authz\n\nimport data.data_policies as dp\n\n#Example
    of data policies that use \"data_policies\" package to create easily data policies
    that deny access or transform the data accordingly\n\ntransform[action] {\n\tdescription
    = \"location data should be removed before copy\"\n\n\tdp.correct_input\n    \n
    \   #user context and access type check\n    dp.check_access_type([dp.AccessTypes.COPY])\n
    \   \n    column_names := dp.column_with_tag(\"location\")\n    action = dp.build_remove_column_action(column_names[_],
    dp.build_policy_from_description(description))\n}  \n\ntransform[action] {\n\tdescription
    = \"sensitive columns in health data should be removed\"\n\n\tdp.correct_input\n
    \   \n    #user context and access type check\n    dp.check_access_type([dp.AccessTypes.COPY,
    dp.AccessTypes.READ])\n    \n    dp.dataset_has_tag(\"HealthData\")\n    \n    column_names
    := dp.column_with_tag(\"SPI\")\n    action = dp.build_remove_column_action(column_names[_],
    dp.build_policy_from_description(description))\n} \n\ntransform[action] {\n\tdescription
    = \"encrypt sensitive personal and health data on COPY out of united states for
    health data assets\"\n    \n\tdp.correct_input\n    \n    #user context and access
    type check\n    dp.check_access_type(dp.AccessTypes.COPY)\n    \n    dp.dataset_has_tag(\"HealthData\")\n
    \   not dp.check_destination([dp.GeoDestinations.US])\n    \n    column_names
    := dp.column_with_any_tag([\"SPI\", \"SMI\"])\n    #action = dp.build_encrypt_column_action(column_names[_],
    dp.build_policy_from_description(description))\n    action = dp.build_redact_column_action(column_names[_],
    dp.build_policy_from_description(description))\n}\n\n#for transactions dataset\ntransform[action]
    {\n\t#description = \"test for transactions dataset that encrypts some columns
    by name\"\n    description = \"test for transactions dataset that redacts some
    columns by name\"\n    \n\tdp.correct_input\n    \n    #user context and access
    type check\n    dp.check_access_type([dp.AccessTypes.READ])\n    \n    dp.dataset_has_tag(\"finance\")\n
    \   \n    column_names := dp.column_with_any_name({\"nameOrig\", \"nameDest\",
    \"nameDest::6\", \"nameOrig::3\"})\n    #action = dp.build_encrypt_column_action(column_names[_],
    dp.build_policy_from_description(description))\n    action = dp.build_redact_column_action(column_names[_],
    dp.build_policy_from_description(description))    \n    \n}\n\n#for transactions
    dataset\ndeny[action] {\n\tdescription = \"test for transactions dataset with
    deny\"\n    \n\tdp.correct_input\n    \n    #user context and access type check\n
    \   dp.check_access_type([dp.AccessTypes.COPY])\n    \n    dp.dataset_has_tag(\"Finance\")\n
    \   \n    action = dp.build_deny_access_action(dp.build_policy_from_description(description))\n}"
kind: ConfigMap
metadata:
  labels:
    openpolicyagent.org/policy: rego
  name: user2-policies
