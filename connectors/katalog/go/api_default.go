/*
 * Data Catalog Service - Asset Details
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapiserver

import (
	"log"
	"net/http"

	"fybrik.io/fybrik/pkg/model/catalog"

	kconfig "sigs.k8s.io/controller-runtime/pkg/client/config"

	"k8s.io/apimachinery/pkg/types"

	"fybrik.io/fybrik/connectors/katalog/pkg/v1alpha1"
	taxonomymodels "fybrik.io/fybrik/pkg/taxonomy/model/datacatalog/base"
	"github.com/gin-gonic/gin"
	"k8s.io/apimachinery/pkg/runtime"
	kclient "sigs.k8s.io/controller-runtime/pkg/client"
)

var client kclient.Client

func init() {
	v1alpha1.SchemeBuilder.Register(&v1alpha1.Asset{})
	scheme := runtime.NewScheme()
	_ = v1alpha1.AddToScheme(scheme)
	var err error
	if client, err = kclient.New(kconfig.GetConfigOrDie(), kclient.Options{Scheme: scheme}); err != nil {
		log.Fatal(err, "failed to create client")
	}
}

// GetAssetInfoPost - getAssetInfo
func GetAssetInfoPost(c *gin.Context) {
	input := new(taxonomymodels.DataCatalogRequest)
	if err := c.ShouldBindJSON(input); err != nil {
		log.Println("Error during ShouldBindJSON:", err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	var namespacedName types.NamespacedName
	if namespace, name, err := splitNamespacedName(input.AssetID); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	} else {
		namespacedName = types.NamespacedName{
			Name:      name,
			Namespace: namespace,
		}
	}

	asset := v1alpha1.Asset{}
	if err := client.Get(c, namespacedName, &asset); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	var columns []catalog.ResourceColumn
	if len(*asset.Spec.AssetMetadata.Columns) > 0 {
		columns = make([]catalog.ResourceColumn, len(*asset.Spec.AssetMetadata.Columns))
		for i, c := range *asset.Spec.AssetMetadata.Columns {
			columns[i] = catalog.ResourceColumn{
				Name: c.Name,
				Tags: c.Tags,
			}
		}
	}

	output := catalog.GetAssetResponse{
		ResourceMetadata: catalog.ResourceMetadata{
			Name:      asset.Spec.AssetMetadata.Name,
			Owner:     asset.Spec.AssetMetadata.Owner,
			Geography: asset.Spec.AssetMetadata.Geography,
			Tags:      asset.Spec.AssetMetadata.Tags,
			Columns:   &columns,
		},
		Details:     asset.Spec.AssetDetails,
		Credentials: asset.Spec.VaultPluginPath,
	}

	c.JSON(http.StatusOK, output)
}
