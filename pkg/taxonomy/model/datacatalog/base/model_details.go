/*
Data Catalog Service - Asset Details

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package base

import (
	"encoding/json"
)

// Details Asset details
type Details struct {
	Connection Connection `json:"connection"`
	DataFormat *string    `json:"dataFormat,omitempty"`
}

// NewDetails instantiates a new Details object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDetails(connection Connection) *Details {
	this := Details{}
	this.Connection = connection
	return &this
}

// NewDetailsWithDefaults instantiates a new Details object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDetailsWithDefaults() *Details {
	this := Details{}
	return &this
}

// GetConnection returns the Connection field value
func (o *Details) GetConnection() Connection {
	if o == nil {
		var ret Connection
		return ret
	}

	return o.Connection
}

// GetConnectionOk returns a tuple with the Connection field value
// and a boolean to check if the value has been set.
func (o *Details) GetConnectionOk() (*Connection, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Connection, true
}

// SetConnection sets field value
func (o *Details) SetConnection(v Connection) {
	o.Connection = v
}

// GetDataFormat returns the DataFormat field value if set, zero value otherwise.
func (o *Details) GetDataFormat() string {
	if o == nil || o.DataFormat == nil {
		var ret string
		return ret
	}
	return *o.DataFormat
}

// GetDataFormatOk returns a tuple with the DataFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Details) GetDataFormatOk() (*string, bool) {
	if o == nil || o.DataFormat == nil {
		return nil, false
	}
	return o.DataFormat, true
}

// HasDataFormat returns a boolean if a field has been set.
func (o *Details) HasDataFormat() bool {
	if o != nil && o.DataFormat != nil {
		return true
	}

	return false
}

// SetDataFormat gets a reference to the given string and assigns it to the DataFormat field.
func (o *Details) SetDataFormat(v string) {
	o.DataFormat = &v
}

func (o Details) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["connection"] = o.Connection
	}
	if o.DataFormat != nil {
		toSerialize["dataFormat"] = o.DataFormat
	}
	return json.Marshal(toSerialize)
}

type NullableDetails struct {
	value *Details
	isSet bool
}

func (v NullableDetails) Get() *Details {
	return v.value
}

func (v *NullableDetails) Set(val *Details) {
	v.value = val
	v.isSet = true
}

func (v NullableDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetails(val *Details) *NullableDetails {
	return &NullableDetails{value: val, isSet: true}
}

func (v NullableDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
