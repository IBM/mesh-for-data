// Copyright 2020 IBM Corp.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.7.1
// source: data_catalog_response.proto

package protobuf

import (
	_ "."
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DataComponentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComponentType string `protobuf:"bytes,1,opt,name=component_type,json=componentType,proto3" json:"component_type,omitempty"` // e.g., column
	//Named terms, that exist in Catalog toxonomy and the values for these terms
	//for columns we will have "SchemaDetails" key, that will include technical schema details for this column
	//TODO: Consider create special field for schema outside of metadata
	NamedMetadata map[string]string `protobuf:"bytes,2,rep,name=named_metadata,json=namedMetadata,proto3" json:"named_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//Tags - can be any free text added to a component (no taxonomy)
	Tags []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *DataComponentMetadata) Reset() {
	*x = DataComponentMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_catalog_response_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataComponentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataComponentMetadata) ProtoMessage() {}

func (x *DataComponentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_data_catalog_response_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataComponentMetadata.ProtoReflect.Descriptor instead.
func (*DataComponentMetadata) Descriptor() ([]byte, []int) {
	return file_data_catalog_response_proto_rawDescGZIP(), []int{0}
}

func (x *DataComponentMetadata) GetComponentType() string {
	if x != nil {
		return x.ComponentType
	}
	return ""
}

func (x *DataComponentMetadata) GetNamedMetadata() map[string]string {
	if x != nil {
		return x.NamedMetadata
	}
	return nil
}

func (x *DataComponentMetadata) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type DatasetMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetNamedMetadata map[string]string `protobuf:"bytes,1,rep,name=dataset_named_metadata,json=datasetNamedMetadata,proto3" json:"dataset_named_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//Tags - can be any free text added to a component (no taxonomy)
	DatasetTags []string `protobuf:"bytes,2,rep,name=dataset_tags,json=datasetTags,proto3" json:"dataset_tags,omitempty"`
	//metadata for each component in asset. In tabular data each column is a component, then we will have: column name -> column metadata
	ComponentsMetadata map[string]*DataComponentMetadata `protobuf:"bytes,3,rep,name=components_metadata,json=componentsMetadata,proto3" json:"components_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DatasetMetadata) Reset() {
	*x = DatasetMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_catalog_response_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetMetadata) ProtoMessage() {}

func (x *DatasetMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_data_catalog_response_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetMetadata.ProtoReflect.Descriptor instead.
func (*DatasetMetadata) Descriptor() ([]byte, []int) {
	return file_data_catalog_response_proto_rawDescGZIP(), []int{1}
}

func (x *DatasetMetadata) GetDatasetNamedMetadata() map[string]string {
	if x != nil {
		return x.DatasetNamedMetadata
	}
	return nil
}

func (x *DatasetMetadata) GetDatasetTags() []string {
	if x != nil {
		return x.DatasetTags
	}
	return nil
}

func (x *DatasetMetadata) GetComponentsMetadata() map[string]*DataComponentMetadata {
	if x != nil {
		return x.ComponentsMetadata
	}
	return nil
}

type DatasetDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                            //name in Catalog
	DataOwner  string       `protobuf:"bytes,2,opt,name=data_owner,json=dataOwner,proto3" json:"data_owner,omitempty"` //inforamtion on the owner of data asset - can have different formats for different catalogs
	DataStore  *_.DataStore `protobuf:"bytes,3,opt,name=data_store,json=dataStore,proto3" json:"data_store,omitempty"` //All info about the data store
	DataFormat string       `protobuf:"bytes,4,opt,name=data_format,json=dataFormat,proto3" json:"data_format,omitempty"`
	Geo        string       `protobuf:"bytes,5,opt,name=geo,proto3" json:"geo,omitempty"` //geography location where data resides (if this information available)
	//LocationType locationType = 10;  //publicCloud/privateCloud etc. Should be filled later when we understand better if we have a closed set of values and how they are used.
	Metadata *DatasetMetadata `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *DatasetDetails) Reset() {
	*x = DatasetDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_catalog_response_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetDetails) ProtoMessage() {}

func (x *DatasetDetails) ProtoReflect() protoreflect.Message {
	mi := &file_data_catalog_response_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetDetails.ProtoReflect.Descriptor instead.
func (*DatasetDetails) Descriptor() ([]byte, []int) {
	return file_data_catalog_response_proto_rawDescGZIP(), []int{2}
}

func (x *DatasetDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DatasetDetails) GetDataOwner() string {
	if x != nil {
		return x.DataOwner
	}
	return ""
}

func (x *DatasetDetails) GetDataStore() *_.DataStore {
	if x != nil {
		return x.DataStore
	}
	return nil
}

func (x *DatasetDetails) GetDataFormat() string {
	if x != nil {
		return x.DataFormat
	}
	return ""
}

func (x *DatasetDetails) GetGeo() string {
	if x != nil {
		return x.Geo
	}
	return ""
}

func (x *DatasetDetails) GetMetadata() *DatasetMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CatalogDatasetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId string          `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	Details   *DatasetDetails `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *CatalogDatasetInfo) Reset() {
	*x = CatalogDatasetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_catalog_response_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CatalogDatasetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CatalogDatasetInfo) ProtoMessage() {}

func (x *CatalogDatasetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_catalog_response_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CatalogDatasetInfo.ProtoReflect.Descriptor instead.
func (*CatalogDatasetInfo) Descriptor() ([]byte, []int) {
	return file_data_catalog_response_proto_rawDescGZIP(), []int{3}
}

func (x *CatalogDatasetInfo) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *CatalogDatasetInfo) GetDetails() *DatasetDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

var File_data_catalog_response_proto protoreflect.FileDescriptor

var file_data_catalog_response_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x1a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf1, 0x01, 0x0a, 0x15,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5b, 0x0a, 0x0e,
	0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65,
	0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x40, 0x0a,
	0x12, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xba, 0x03, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x6b, 0x0a, 0x16, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54,
	0x61, 0x67, 0x73, 0x12, 0x64, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x47, 0x0a, 0x19, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x68, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe5, 0x01, 0x0a,
	0x0e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x34, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x65, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x65, 0x6f, 0x12, 0x37, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x69, 0x0a, 0x12, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42,
	0x47, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x5a, 0x38,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x62, 0x6d, 0x2f, 0x74,
	0x68, 0x65, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x66, 0x6f, 0x72, 0x2d, 0x64, 0x61, 0x74, 0x61,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_data_catalog_response_proto_rawDescOnce sync.Once
	file_data_catalog_response_proto_rawDescData = file_data_catalog_response_proto_rawDesc
)

func file_data_catalog_response_proto_rawDescGZIP() []byte {
	file_data_catalog_response_proto_rawDescOnce.Do(func() {
		file_data_catalog_response_proto_rawDescData = protoimpl.X.CompressGZIP(file_data_catalog_response_proto_rawDescData)
	})
	return file_data_catalog_response_proto_rawDescData
}

var file_data_catalog_response_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_data_catalog_response_proto_goTypes = []interface{}{
	(*DataComponentMetadata)(nil), // 0: connectors.DataComponentMetadata
	(*DatasetMetadata)(nil),       // 1: connectors.DatasetMetadata
	(*DatasetDetails)(nil),        // 2: connectors.DatasetDetails
	(*CatalogDatasetInfo)(nil),    // 3: connectors.CatalogDatasetInfo
	nil,                           // 4: connectors.DataComponentMetadata.NamedMetadataEntry
	nil,                           // 5: connectors.DatasetMetadata.DatasetNamedMetadataEntry
	nil,                           // 6: connectors.DatasetMetadata.ComponentsMetadataEntry
	(*_.DataStore)(nil),           // 7: connectors.DataStore
}
var file_data_catalog_response_proto_depIdxs = []int32{
	4, // 0: connectors.DataComponentMetadata.named_metadata:type_name -> connectors.DataComponentMetadata.NamedMetadataEntry
	5, // 1: connectors.DatasetMetadata.dataset_named_metadata:type_name -> connectors.DatasetMetadata.DatasetNamedMetadataEntry
	6, // 2: connectors.DatasetMetadata.components_metadata:type_name -> connectors.DatasetMetadata.ComponentsMetadataEntry
	7, // 3: connectors.DatasetDetails.data_store:type_name -> connectors.DataStore
	1, // 4: connectors.DatasetDetails.metadata:type_name -> connectors.DatasetMetadata
	2, // 5: connectors.CatalogDatasetInfo.details:type_name -> connectors.DatasetDetails
	0, // 6: connectors.DatasetMetadata.ComponentsMetadataEntry.value:type_name -> connectors.DataComponentMetadata
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_data_catalog_response_proto_init() }
func file_data_catalog_response_proto_init() {
	if File_data_catalog_response_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_data_catalog_response_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataComponentMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_catalog_response_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_catalog_response_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_catalog_response_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CatalogDatasetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_data_catalog_response_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_data_catalog_response_proto_goTypes,
		DependencyIndexes: file_data_catalog_response_proto_depIdxs,
		MessageInfos:      file_data_catalog_response_proto_msgTypes,
	}.Build()
	File_data_catalog_response_proto = out.File
	file_data_catalog_response_proto_rawDesc = nil
	file_data_catalog_response_proto_goTypes = nil
	file_data_catalog_response_proto_depIdxs = nil
}
